doctype html
html
  head
    title Dreams of Code
    = csrf_meta_tags
    = csp_meta_tag
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload'
    = stylesheet_link_tag "https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
    = javascript_pack_tag 'application', 'data-turbolinks-track': 'reload'
    script type='text/javascript' src="https://cdn.jsdelivr.net/npm/bulma-tagsinput@2.0.0/dist/js/bulma-tagsinput.min.js"
  body
    .hero.is-fullheight.is-fullwidth
      .hero-head
        nav.navbar
          .container
            .navbar-brand
              span.is-size-3
                a.navbar-item href=root_path Dreams of Code
              a.navbar-burger.burger role='button' aria-label='menu' aria-expanded='false' data-target='navbarMenuHero'
                span aria-hidden='true'
                span aria-hidden='true'
                span aria-hidden='true'
            div.navbar-menu id='navbarMenuHero'
              .navbar-end
                a.navbar-item href=root_path Home
                - unless user_signed_in?
                  a.navbar-item href=new_user_session_path Log in
                - else
                  a.navbar-item href=destroy_user_session_path(current_user) Log out
                a.navbar-item target='_blank' href='https://pmop.github.com' About me

        - if user_signed_in? && (current_user.admin? || current_user.moderator? || current_user.editor?)
          = render 'application/navbar'
        - if notice.present?
          .notification.is-warning
            button.delete
            p = notice
      .hero-body
        == yield
      .hero-foot
        == render 'application/footer'

  javascript:
    document.addEventListener('DOMContentLoaded', () => {
      (document.querySelectorAll('.notification .delete') || []).forEach(($delete) => {
        $notification = $delete.parentNode;
        $delete.addEventListener('click', () => {
          $notification.parentNode.removeChild($notification);
        });
      });
    });

    document.addEventListener('DOMContentLoaded', () => {
      // Get all "navbar-burger" elements
      const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);

      // Check if there are any navbar burgers
      if ($navbarBurgers.length > 0) {

        // Add a click event on each of them
        $navbarBurgers.forEach( el => {
          el.addEventListener('click', el => {

            // Get the target from the "data-target" attribute
            const target = el.target.dataset.target;
            const $target = document.getElementById(target);
            console.log($target);

            // Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
            $target.classList.toggle('is-active');

          });
        });
      }

    });
